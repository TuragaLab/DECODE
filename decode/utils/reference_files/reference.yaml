# This is the reference .yaml file which comprises the complete set of parameters.
# You may modify each of those, those with values are defaults, those without values are
#   1. needed
#   2. derived / automatically determined
Camera:
  baseline:
  convert2photons: true
  e_per_adu:
  em_gain:
  mirror_dim:   # this field is only active during fitting per inference .py file
  px_size:
  qe: 1.0
  read_sigma:
  spur_noise:
Computing:
  multiprocessing_sharing_strategy: file_system
  precision: 32
Evaluation:
  dist_ax: 500.0
  dist_lat: 250.0
  dist_vol:
  match_dims: 3
Hardware:
  device:
    training: cuda:0
    simulation: cuda:0
  cpu:
    worker: 16
    niceness: 0  # only applicable to unix
Logging:
  no_op: false
  logger: TensorBoardLogger
Loss:
  ch_weight:
Meta:
  version:
Model:
  backbone: SigmaMUNet
  backbone_specs:
    activation: ELU
    depth:
    depth_shared: 2
    depth_union: 2
    depth_bg:
    init_custom: true
    initial_features: 48
    initial_features_bg:
    inter_features: 48
    norm:
    norm_bg:
    norm_bg_groups:
    norm_groups:
    norm_head:
    norm_head_groups:
    p_dropout:
    pool_mode: StrideConv
    upsample_mode: nearest
    recpt_bg:
    skip_gn_level:
    up_mode: upsample
    use_last_nl:
  channels_in: 3
Optimizer:
  name: AdamW
  specs:
    lr: 0.0002
    weight_decay: 0.1
Paths:
  calibration:  # spline calib
  experiment:  # main output dir
  logging:  # logging dir
  checkpoint_init:   # initialise from checkpoint (i.e. resume training)
  model_init:  # model weights
PostProcessing:
  name: SpatialIntegration  # or LookUp
  specs:
    raw_th: 0.5
Scaling:  # if some values are missing they will be auto-set as described in the respective comments below
  input_scale:  # intensity_mu / 50
  input_offset:  # bg_uniform (mean)
  bg_max:  # 1.2 * upper limit of bg val
  phot_max:  # intensity_mu + 8 * sigma
  z_max:  # 1.2 * upper simulation extent
Simulation:
  bg_uniform:  # tuple or single value
  code: [0]  # color / channel code
  density:  # either density xor emitter avg
  emitter_avg: 20  # either density xor emitter avg
  emitter_extent:
    x: [-0.5, 39.5]
    y: [-0.5, 39.5]
    z: [-750., 750.]
  frame_extent:
    x: [-0.5, 39.5]
    y: [-0.5, 39.5]
  img_size: [40, 40]
  intensity:
    mean:  # mean intensity (i.e. photon flux)
    std:  # intensity spread
  lifetime_avg:
  PSF:
    CubicSpline:
      roi_size:  # if null, take the whole range of calibration
      roi_auto_center: false
  psf_extent:
    x: [-0.5, 39.5]
    y: [-0.5, 39.5]
    z: null
  roi_size:  # if none, take the whole range of calibration
  roi_auto_center: false
  samples: 10000
  xy_unit: px
Trainer:
  frame_window: 3
  train_dim: 3  # 3 or 2 or 3D or 2D respectively
  batch_size: 64
  max_epochs: 500
  schedulers:
    learning_rate:
      name: StepLR
      specs:
        step_size: 10
        gamma: 0.9
    restarter:
      max_tries: 5
      threshold: 100
Target:
  max_emitters: 250
  filter:
    phot: [100., null]
Test:  # those overwrite the other Simulation parameters (applicable to test set)
  samples: 512
